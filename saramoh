import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import uuid

st.set_page_config(page_title='لوحة مؤشرات الصحة — سورية', layout='wide')

if 'auth_ok' not in st.session_state: st.session_state.auth_ok=False
def do_login(user,pw): return user=='minister' and pw=='moh2025'
if not st.session_state.auth_ok:
    st.markdown('<h2 style="text-align:center">تسجيل الدخول</h2>', unsafe_allow_html=True)
    with st.form('login_form'):
        username=st.text_input('اسم المستخدم', value='')
        password=st.text_input('كلمة المرور', value='', type='password')
        submit=st.form_submit_button('دخول')
        if submit:
            if do_login(username,password):
                st.session_state.auth_ok=True
                if 'session_id' not in st.session_state: st.session_state.session_id=str(uuid.uuid4())
                st.rerun()
            else:
                st.error('بيانات الدخول غير صحيحة')
    st.stop()

PRIMARY='#0f3d33'; GOLD='#c6ab6e'; ACCENT1='#8bb69b'; WARN='#ef6c00'; DANGER='#c62828'; MUTED='#9e9e9e'
SEQ=[PRIMARY,GOLD,ACCENT1,WARN,DANGER,MUTED]
st.markdown('''<style>html, body, [class*="css"]{direction:rtl;font-family:"Noto Naskh Arabic","Tahoma","Segoe UI",sans-serif;}h1,h2,h3,h4{font-weight:700}.sidebar .sidebar-content{direction:rtl;text-align:right}.stMetric{font-size:1.1rem}</style>''', unsafe_allow_html=True)

@st.cache_data(show_spinner=False)
def load_csv(path_or_buffer):
    return pd.read_csv(path_or_buffer, encoding='utf-8')

st.sidebar.header('البيانات')
uploaded=st.sidebar.file_uploader('ارفع CSV أو استخدم الملف التجريبي', type=['csv'])
try:
    df=load_csv(uploaded) if uploaded else load_csv('seed_moh_dataset.csv')
except FileNotFoundError:
    st.error('ملف seed_moh_dataset.csv غير موجود. شغّل التطبيق من مجلد الملف.')
    st.stop()
except UnicodeDecodeError:
    st.error('خطأ ترميز الملف. احفظ الملف بترميز UTF-8.')
    st.stop()
except Exception as e:
    st.error(f'تعذر تحميل الملف: {e}')
    st.stop()

def to_datetime_naive(series):
    try:
        s=pd.to_datetime(series, errors='coerce')
        if s.dt.tz is not None: s=s.dt.tz_convert(None)
        return s
    except Exception:
        return pd.to_datetime(series, errors='coerce', utc=True).dt.tz_convert(None)

if 'DateOfVisit' in df.columns: df['DateOfVisit']=to_datetime_naive(df['DateOfVisit'])
for c in ['q1.9.6','q1.9.7','q3.1','q3.1_active','q3.1_not_active','q3.1_admission_avg','q3.3.1_active','q3.3.1_inactive','q3.3.2_active','q3.3.2_inactive','q3.3.3_active','q3.3.3_inactive']:
    if c in df.columns: df[c]=pd.to_numeric(df[c], errors='coerce')

st.sidebar.header('الفلاتر')
fid=st.sidebar.text_input('الرمز التعريفي للمنشأة').strip() if 'facility_id' in df.columns else ''
if fid: df=df[df['facility_id'].astype(str).str.contains(fid, case=False, na=False)]
fname=st.sidebar.text_input('اسم المنشأة').strip() if 'facility_name' in df.columns else ''
if fname: df=df[df['facility_name'].astype(str).str.contains(fname, case=False, na=False)]
if 'governorate_entry' in df.columns:
    govs=sorted(df['governorate_entry'].dropna().unique())
    sel_govs=st.sidebar.multiselect('المحافظة', options=govs, default=govs)
    if sel_govs: df=df[df['governorate_entry'].isin(sel_govs)]
if 'area_entry' in df.columns:
    areas=sorted(df['area_entry'].dropna().unique())
    sel_areas=st.sidebar.multiselect('المنطقة/اللواء', options=areas, default=[])
    if sel_areas: df=df[df['area_entry'].isin(sel_areas)]
if 'DateOfVisit' in df.columns and df['DateOfVisit'].notna().any():
    min_d=df['DateOfVisit'].min().date(); max_d=df['DateOfVisit'].max().date()
    dr=st.sidebar.date_input('تاريخ الزيارة', value=(min_d,max_d))
    if isinstance(dr,tuple) and len(dr)==2:
        start=pd.to_datetime(dr[0]); end=pd.to_datetime(dr[1])+pd.Timedelta(days=1)-pd.Timedelta(seconds=1)
        df=df[(df['DateOfVisit']>=start) & (df['DateOfVisit']<=end)]
if 'facility_state' in df.columns:
    states=sorted(df['facility_state'].dropna().unique())
    sel_states=st.sidebar.multiselect('حالة المنشأة', options=states, default=[])
    if sel_states: df=df[df['facility_state'].isin(sel_states)]
if 'q1.7' in df.columns:
    cats=sorted(df['q1.7'].dropna().unique())
    sel_cats=st.sidebar.multiselect('فئة المنشأة', options=cats, default=[])
    if sel_cats: df=df[df['q1.7'].isin(sel_cats)]
if 'q1.8' in df.columns:
    deps=sorted(df['q1.8'].dropna().unique())
    sel_deps=st.sidebar.multiselect('تبعية المنشأة', options=deps, default=[])
    if sel_deps: df=df[df['q1.8'].isin(sel_deps)]

def is_yes(x): return str(x).strip() in ['1','True','true','نعم','yes','Yes']
def percent(n,d): return (n/d*100) if d else 0

def kpis(df):
    c1,c2,c3,c4,c5=st.columns(5)
    total=len(df)
    working=df['facility_state'].eq('تعمل').sum() if 'facility_state' in df.columns else 0
    partial=df['facility_state'].eq('تعمل بشكل جزئي').sum() if 'facility_state' in df.columns else 0
    not_work=df['facility_state'].eq('لا تعمل').sum() if 'facility_state' in df.columns else 0
    licensed=df['q1.10'].apply(is_yes).sum() if 'q1.10' in df.columns else 0
    avgv=df['q1.9.6'].mean() if 'q1.9.6' in df.columns else 0
    c1.metric('إجمالي المنشآت 🏥', f'{total:,}')
    c2.metric('العاملة ✅', f'{working:,}', f'{percent(working,total):.1f}%')
    c3.metric('جزئي/متوقف ⚠️', f'{partial+not_work:,}', f'{percent(partial+not_work,total):.1f}%')
    c4.metric('مرخصة 🛡️', f'{licensed:,}', f'{percent(licensed,total):.1f}%')
    c5.metric('متوسط المراجعين/شهر 👥', f'{avgv:,.0f}')
    st.markdown('---')

st.markdown(f"<h2 style='color:{PRIMARY}'>لوحة مؤشرات القطاع الصحي - وزارة الصحة السورية</h2>", unsafe_allow_html=True)
tabs=st.tabs(['النظرة العامة','الخدمات','الكادر','المستشفيات','البنية التحتية','السجل'])

with tabs[0]:
    kpis(df)
    col1,col2=st.columns(2)
    if 'governorate_entry' in df.columns and 'facility_state' in df.columns and len(df):
        grouped=df.groupby(['governorate_entry','facility_state']).size().reset_index(name='عدد')
        fig=px.bar(grouped, x='governorate_entry', y='عدد', color='facility_state', barmode='stack', title='حالة المنشآت حسب المحافظة', color_discrete_sequence=SEQ, labels={'governorate_entry':'المحافظة'})
        fig.update_layout(xaxis_tickangle=-20, margin=dict(t=60,b=100), legend_title_text='الحالة')
        col1.plotly_chart(fig, use_container_width=True)
    if 'q1.7' in df.columns and len(df):
        cat=df['q1.7'].value_counts().reset_index(); cat.columns=['فئة المنشأة','عدد']
        fig2=px.pie(cat, names='فئة المنشأة', values='عدد', hole=0.45, title='توزيع فئات المنشآت', color_discrete_sequence=SEQ)
        col2.plotly_chart(fig2, use_container_width=True)
    st.markdown('---')
    col3,col4=st.columns(2)
    if 'q1.8' in df.columns:
        dep=df['q1.8'].value_counts().reset_index(); dep.columns=['تبعية المنشأة','عدد']
        fig3=px.bar(dep, x='تبعية المنشأة', y='عدد', title='تبعية المنشآت', color_discrete_sequence=[PRIMARY])
        fig3.update_layout(xaxis_tickangle=-20, margin=dict(t=60,b=100))
        col3.plotly_chart(fig3, use_container_width=True)
    if 'lat' in df.columns and 'lon' in df.columns and df[['lat','lon']].notna().any().any():
        mdf=df.dropna(subset=['lat','lon'])
        mapfig=px.scatter_mapbox(mdf, lat='lat', lon='lon', hover_name='facility_name', color='facility_state', color_discrete_sequence=SEQ, zoom=5, height=450)
        mapfig.update_layout(mapbox_style='open-street-map', margin=dict(t=0,b=0,l=0,r=0))
        col4.plotly_chart(mapfig, use_container_width=True)
    else:
        col4.info('لا تتوفر إحداثيات (lat/lon) لعرض الخريطة. أضف الأعمدة lat, lon في البيانات لتمكين الخريطة.')

with tabs[1]:
    kpis(df)
    service_map={'q1.20_1':'تنظيم أسرة','q1.20_2':'رعاية حامل','q1.20_3':'رعاية الأم','q1.20_4':'خدمات نسائية أخرى','q1.20_5':'رعاية وليد','q1.20_6':'توليد طبيعي','q1.20_7':'ولادة قيصرية','q1.20_8':'صحة الطفل','q1.20_9':'لقاح','q1.20_10':'الرعاية المتكاملة للطفل','q1.20_11':'برنامج المراهقين','q1.20_12':'مسنين','q1.20_13':'صحة الفم والأسنان','q1.20_14':'نفسية','q1.20_15':'الأمراض السارية','q1.20_16':'التشخيص المخبري','q1.20_17':'صيدلية','q1.20_18':'الأمراض المزمنة','q1.20_19':'سكري','q1.20_20':'جراحة صغرى','q1.20_21':'جراحية','q1.20_22':'تنظيرية','q1.20_23':'غسيل الكلى','q1.20_24':'معالجة فيزيائية','q1.20_25':'الأشعة','q1.20_26':'عيادة عامة','q1.20_27':'اسعاف','q1.20_-96':'خدمات أخرى'}
    present=[c for c in service_map if c in df.columns]
    if present:
        rows=[]
        for c in present:
            yes=df[c].apply(is_yes).sum(); tot=df[c].notna().sum()
            rows.append({'الخدمة':service_map[c],'نسبة التوفر %':percent(yes,tot),'عدد نعم':yes,'إجمالي':tot})
        svc=pd.DataFrame(rows).sort_values('نسبة التوفر %', ascending=False)
        bar=px.bar(svc.head(15), x='الخدمة', y='نسبة التوفر %', title='أعلى الخدمات توفراً', text='نسبة التوفر %', color_discrete_sequence=[PRIMARY])
        bar.update_traces(texttemplate='%{text:.1f}%', textposition='outside', cliponaxis=False)
        bar.update_layout(xaxis_tickangle=-20, margin=dict(t=60,b=110))
        st.plotly_chart(bar, use_container_width=True)
        # Heatmap clearer
        if 'governorate_entry' in df.columns:
            govs=sorted(df['governorate_entry'].dropna().unique())
            heat=[]
            for g in govs:
                dfg=df[df['governorate_entry']==g]
                row={'المحافظة':g}
                for c in present:
                    yes=dfg[c].apply(is_yes).sum(); tot=dfg[c].notna().sum()
                    row[service_map[c]]=round(percent(yes,tot),1)
                heat.append(row)
            hdf=pd.DataFrame(heat).set_index('المحافظة')
            hfig=px.imshow(hdf, aspect='auto', color_continuous_scale='Greens', origin='lower', labels=dict(color='نسبة %'), title='خريطة حرارية — توفر الخدمات حسب المحافظة', zmin=0, zmax=100, text_auto=True)
            hfig.update_layout(coloraxis_colorbar=dict(ticksuffix='%'))
            st.plotly_chart(hfig, use_container_width=True)
        st.dataframe(svc, use_container_width=True, hide_index=True)
    else:
        st.warning('لم يتم العثور على أعمدة الخدمات q1.20_* في الملف.')

with tabs[2]:
    kpis(df)
    staff_labels={'q2_1':'طبيب عام','q2_2':'طبيب مقيم','q2_3':'اختصاصي أسرة','q2_4':'اختصاصي أطفال','q2_5':'اختصاصي نسائية','q2_6':'اختصاصي داخلية','q2_7':'اختصاصي قلبية','q2_8':'اختصاصي جراحة عامة','q2_9':'اختصاصي طوارئ','q2_10':'أنف أذن حنجرة','q2_11':'عينية','q2_12':'أشعة','q2_13':'نفسي','q2_14':'طبيب أسنان','q2_15':'صيدلاني','q2_16':'جلدية','q2_17':'بولية','q2_18':'عظمية','q2_19':'مخبر','q2_20':'معالجة فيزيائية','q2_21':'تمريض','q2_22':'قابلات','q2_23':'فني أشعة','q2_24':'فني مخبر','q2_25':'فني صيدلة','q2_26':'فني معالجة فيزيائية','q2_27':'فني أسنان','q2_28':'فني صحة عامة','q2_29':'مساعد/ة ممرض/ة','q2_30':'مرشد اجتماعي','q2_31':'إداري','q2_32':'هندسي','q2_33':'خدمي','q2_34':'فني إحصاء','q2_35':'فني تخدير','q2_36':'فني عمليات','q2_37':'فني أطراف صناعية','q2_39':'مساعد مهندس','q2__96_yn_1':'كادر آخر (1)','q2__96_yn_2':'كادر آخر (2)'}
    present=[c for c in staff_labels if c in df.columns]
    if present:
        rows=[]
        for c in present:
            yes=df[c].apply(is_yes).sum(); tot=df[c].notna().sum()
            rows.append({'الفئة':staff_labels[c],'نسبة التوفر %':percent(yes,tot),'عدد نعم':yes,'إجمالي':tot})
        sdf=pd.DataFrame(rows).sort_values('نسبة التوفر %', ascending=False)
        fig=px.bar(sdf.head(15), x='الفئة', y='نسبة التوفر %', title='أكثر فئات الكادر المتوفرة', text='نسبة التوفر %', color_discrete_sequence=[GOLD])
        fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside', cliponaxis=False)
        fig.update_layout(xaxis_tickangle=-20, margin=dict(t=60,b=110))
        st.plotly_chart(fig, use_container_width=True)
        # staff heatmap by governorate
        if 'governorate_entry' in df.columns:
            govs=sorted(df['governorate_entry'].dropna().unique())
            heat=[]
            for g in govs:
                dfg=df[df['governorate_entry']==g]
                row={'المحافظة':g}
                for c in present:
                    yes=dfg[c].apply(is_yes).sum(); tot=dfg[c].notna().sum()
                    row[staff_labels[c]]=round(percent(yes,tot),1)
                heat.append(row)
            hdf=pd.DataFrame(heat).set_index('المحافظة')
            hfig=px.imshow(hdf, aspect='auto', color_continuous_scale='YlGnBu', origin='lower', labels=dict(color='نسبة %'), title='خريطة حرارية — توفر الكادر حسب المحافظة', zmin=0, zmax=100, text_auto=True)
            hfig.update_layout(coloraxis_colorbar=dict(ticksuffix='%'))
            st.plotly_chart(hfig, use_container_width=True)
        st.dataframe(sdf, use_container_width=True, hide_index=True)
    else:
        st.warning('صفحة الكوادر فارغة لأن أعمدة q2_* غير موجودة في الملف المرفوع. الرجاء تضمين أعمدة الكادر.')

with tabs[3]:
    kpis(df)
    c1,c2,c3,c4=st.columns(4)
    total=df['q3.1'].sum() if 'q3.1' in df.columns else 0
    active=df['q3.1_active'].sum() if 'q3.1_active' in df.columns else 0
    inactive=df['q3.1_not_active'].sum() if 'q3.1_not_active' in df.columns else 0
    los=df['q3.1_admission_avg'].mean() if 'q3.1_admission_avg' in df.columns else 0
    c1.metric('مجموع الأسرة', f'{int(total):,}')
    c2.metric('الأسرة الفعّالة', f'{int(active):,}')
    c3.metric('الأسرة غير الفعّالة', f'{int(inactive):,}')
    c4.metric('متوسط أيام الإقامة', f'{los:.1f}')
    for a,i,title in [('q3.3.1_active','q3.3.1_inactive','أسرة العناية المشددة'),('q3.3.2_active','q3.3.2_inactive','المنافس'),('q3.3.3_active','q3.3.3_inactive','الحواضن')]:
        if a in df.columns and i in df.columns:
            sums=pd.DataFrame({'الحالة':['فعّالة','معطلة'],'العدد':[df[a].sum(),df[i].sum()],'الفئة':[title,title]})
            bf=px.bar(sums, x='الفئة', y='العدد', color='الحالة', barmode='group', title=title, color_discrete_sequence=[PRIMARY,GOLD])
            st.plotly_chart(bf, use_container_width=True)

with tabs[4]:
    kpis(df)
    cols=st.columns(4)
    if 'q4.5' in df.columns:
        yes=df['q4.5'].apply(is_yes).sum(); tot=df['q4.5'].notna().sum()
        cols[0].metric('توفر سيارة إسعاف 🚑', f'{percent(yes,tot):.1f}%')
    if 'q4.8' in df.columns:
        yes=df['q4.8'].apply(is_yes).sum(); tot=df['q4.8'].notna().sum()
        cols[1].metric('الكهرباء متوفرة ⚡', f'{percent(yes,tot):.1f}%')
    if 'q4.17' in df.columns:
        duty=df['q4.17'].value_counts().reset_index(); duty.columns=['فترة الدوام','عدد']
        ib=px.bar(duty, x='فترة الدوام', y='عدد', title='فترة الدوام في المنشآت', color_discrete_sequence=[PRIMARY])
        ib.update_layout(margin=dict(t=60,b=80))
        cols[2].plotly_chart(ib, use_container_width=True)
    if 'q4.18' in df.columns:
        water=df['q4.18'].value_counts().reset_index(); water.columns=['مصدر المياه','عدد']
        ip=px.pie(water, names='مصدر المياه', values='عدد', hole=0.45, title='مصادر المياه الرئيسية', color_discrete_sequence=SEQ)
        cols[3].plotly_chart(ip, use_container_width=True)

with tabs[5]:
    kpis(df)
    st.subheader('سجل المنشآت (تفصيلي)')
    col_map={'facility_id':'الرمز التعريفي للمنشأة','facility_name':'اسم المنشأة','DateOfVisit':'تاريخ الزيارة','enumerator_id':'الرقم التعريفي للباحث','enumerator_name':'اسم الباحث','governorate_entry':'المحافظة','area_entry':'المنطقة/اللواء','facility_state':'حالة المنشأة','q1.7':'فئة المنشأة','q1.8':'تبعية المنشأة','q1.10':'ترخيص','q1.9.6':'عدد المراجعين (آخر شهر)','q1.9.7':'عدد السكان المخدّمين تقريباً'}
    show_cols=[c for c in col_map if c in df.columns]
    df_show=df[show_cols].rename(columns=col_map) if show_cols else pd.DataFrame()
    sort_col='تاريخ الزيارة' if 'تاريخ الزيارة' in df_show.columns else (df_show.columns[0] if len(df_show.columns) else None)
    if sort_col: df_show=df_show.sort_values(by=sort_col, ascending=False)
    st.dataframe(df_show, use_container_width=True, hide_index=True)
    csv=df.to_csv(index=False).encode('utf-8-sig')
    st.download_button('تنزيل الملف بعد التصفية (CSV)', data=csv, file_name='filtered_moh_dataset.csv', mime='text/csv')
streamlit==1.37.1
pandas>=2.0.0
numpy>=1.23.0
plotly>=5.22.0

